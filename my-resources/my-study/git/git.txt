https://www.cnblogs.com/zhangqie/p/7460689.html
Git基本使用

github建立远程仓库：
1. 先在github上面建立属于自己的项目。—new repository
2. 配置个人信息（名字与邮箱）
	使用Git的第一件事就是设置你的名字和email,这些就是你在提交commit时的签名
	---------------------------
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
	git config -l // 或 git config -list  查看是否配置成功
    在电脑上面的：C:\Users\你的电脑用户名\.gitconfig 文件中，记录你的配置
	---------------------------
3. 创建SSH Key
	----------------------------------------
	ssh-keygen -t rsa -C 'email@example.com'
	----------------------------------------
	后面就一直按回车，不用管，一直等到直接能输入下一个命令为止

4. 配置github上的SSH Key
	1. 查看本机ssh公钥方法：
		进入.ssh目录：cd ~/.ssh
		查看公钥：cat id_rsa.pub    或者vim id_rsa.pub

		或者你也可以直接输入命令 ：cat ~/.ssh/id_rsa.pub
		或者你也可以直接打开你用户（一般都是Administrator）下的.ssh文件夹，打开它里面的id_rsa.pub  文件
	2. 进入gitlab网页，【setting->SSH Keys】，将查看到的密钥复制在里面
	3. 本地操作：查看是否创建成功，输入命令： ssh -T git@github.com
		如果现实如下信息，表示已经成功创建。
		Hi xiaohuangmeng! You’ve successfully authenticated, but GitHub does not provide shell access.


git commit之后，想撤销commit：
	git reset --soft HEAD^
	注：HEAD^的意思是上一个版本，也可以写成HEAD~1；如果你进行了2次commit，想都撤回，可以使用HEAD~2

	--mixed
	意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作
	这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。


	--soft
	不删除工作空间改动代码，撤销commit，不撤销git add .

	--hard
	删除工作空间改动代码，撤销commit，撤销git add .

	注意完成这个操作后，就恢复到了上一次的commit状态。



commit注释写错了，只是想改一下注释，只需要：
git commit --amend

此时会进入默认vim编辑器，修改注释完毕后保存就好了。











1.git init

#初始化本地仓库

2.git remote add origin 你的仓库地址

#关联本地仓库到远程仓库

3. git add *

#添加要提交的文件到暂存区

4.git commit -m "init commint"

#提交代码到文件控制仓库

5.git fetch origin

#将远程主机的更新，全部取回本地

6.git pull origin master    如果报错用这个 git pull origin master --allow-unrelated-histories

#拉取远程分支代码到本地

7.git push -u origin master:master

#提交本地分支(master)代码到远程分支(master)







此项目的存储库为空
您可以使用以下选项之一直接在GitLab中创建文件。

命令行指令
您还可以使用以下说明从计算机上传现有文件。


Git全球设置
git config --global user.name“liupcs” 
git config --global user.email“17775193437@163.com”

创建一个新的存储库
git clone git@gitlab.com:liupcs/ci_cms_tpl.git 
cd ci_cms_tpl 
touch README.md 
git add README.md 
git commit -m“add README” git push -u origin master

推送现有文件夹
cd existing_folder 
git init 
git remote add origin git@gitlab.com:liupcs/ci_cms_tpl.git 
git add。
git commit -m“初始提交” git push -u origin master

推送现有的Git存储库
cd existing_repo 
git remote rename origin old-origin 
git remote add origin git@gitlab.com:liupcs/ci_cms_tpl.git 
git push -u origin --all 
git push -u origin --tags












操作区：本地编辑文件
暂存区：git add . 添加到暂存区
版本库：git commit 提交到版本库






    git init            初始化Git仓库  初始化之后会生成.git
    git status          查看当前状态
    git add .           将当前文件 提交到暂存区
            .   代表当前目录下所有文件
            filename    文件名
    git commit -a -m '描述' 将暂存区的文件 提交到版本库
                            git  commit之前 必须进行 git add
    git log             查看 所有的commit 历史
    git reset --hard commitId      回退到某一个commit版本，覆盖到本地的文件
    git reflog          查看命令历史 可以看到 git log  有可能看不到的版本  回到未来
    git chekcout -- filename    取消本次工作区 对本文件的修改 前提是 这个文件
    要提交过
    git reset HEAD filename     将添加到暂存区的文件撤回

    git push                    将本地版本库的文件推送到远程版本库
    git push origin master      将本地版本库的文件 推送到远程的master分支
    git pull                    将远程的文件拉取下来
    【注】 每次要修改文件时 都要先 git pull

    分支操作
        git branch          创建分支（查看当前分支）
        git branch dev      创建一个叫做dev的分支
        git checkout dev    切换到 dev分支
        git merge dev       合并dev分支到当前分支
        git diff            查看冲突
        git checkout -b dev 创建并切换到dev分支
        git checkout -d dev 删除dev分支
        git checkout -D dev 强制删除dev分支

    开发流程
        远程库
        master
        dev 在dev写开发
        切换回master
        执行 git merge dev
        推送到远程

    分支
        master      主分支   他是用来保存发布版本
        online      线上分支  用户访问的那个
        develop     主开发分支
        local
    远程库 github coding  码云
        可以分两大类
        1、在github上初始化仓库 直接clone下来
            勾选 Initialize this repository with a README
        2、创建github空仓库  在本地初始化 然后建立关联
            没有勾选 Initialize this repository with a README
            git init
            git add README.md
            git commit -m "first commit"
            git remote add origin https://github.com/liuhaobryant/asdasd.git
            git push -u origin master

            【注】也可以使用用ssh方式

        也可以分这么两大类
        1、https
            git clone https地址
        2、ssh（推荐） 速度快
            1、需要添加公钥
            ssh-keygen -t rsa -C 'youremail@163.com' （在gitbush 下执行）
            2、添加完成之后再你的用户主目录下就会有一个.ssh的文件夹 进去 打开带pub的文件 复制里面的代码 到 github 的settings里 ssh and gpg keys 里 添加公钥进去就行了
            3、git clone ssh地址
    忽略文件
        .gitignore  用来忽略东西的
            aaa/*
            *.txt
            !1.txt
            *.[ao]  忽略 所有的 后缀为 a 和 o 的
    多人写作开发
        添加成

------------------------------------------------------------------------------
ThinkPHP5.0
    1、什么是框架
        说白了就是个工具 就是人家为咱们封装了很多功能 直接拿过来用 我们学习框架呢 其实很枯燥 就是怼手册

        使用框架有坏处吗    与废武功 就学框架

    2、常见PHP框架
        国人开发
        ThinkPHP3.2.3   流年  刘晨
        ThinkPHP5.0

        Laravel     上手快  越看越复杂
        YII
        CI
        symfony
        yaf         鸟哥写的
    3、TP
        http://www.thinkphp.cn/




		
		
-----------------------------------------------------------
错误处理：
1. 提交代码时报错
$ git push -u origin master
To gitlab.com:liupcs/ci_cms_tpl.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@gitlab.com:liupcs/ci_cms_tpl.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.


解决方法：
如果您是唯一从事该项目的人，您可以做的是：

 git checkout master
 git push origin +HEAD
